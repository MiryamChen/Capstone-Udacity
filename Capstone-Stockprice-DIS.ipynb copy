{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a3e400b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting yfinance\n",
      "  Obtaining dependency information for yfinance from https://files.pythonhosted.org/packages/8e/fc/2d99838a91407dffa6c9e99a2119ba593ed43f122c638e7aa5d342816a32/yfinance-0.2.26-py2.py3-none-any.whl.metadata\n",
      "  Downloading yfinance-0.2.26-py2.py3-none-any.whl.metadata (11 kB)\n",
      "Collecting pandas>=1.3.0 (from yfinance)\n",
      "  Obtaining dependency information for pandas>=1.3.0 from https://files.pythonhosted.org/packages/3c/b2/0d4a5729ce1ce11630c4fc5d5522a33b967b3ca146c210f58efde7c40e99/pandas-2.0.3-cp310-cp310-macosx_10_9_x86_64.whl.metadata\n",
      "  Downloading pandas-2.0.3-cp310-cp310-macosx_10_9_x86_64.whl.metadata (18 kB)\n",
      "Collecting numpy>=1.16.5 (from yfinance)\n",
      "  Obtaining dependency information for numpy>=1.16.5 from https://files.pythonhosted.org/packages/fa/07/c6980120967a9fc76138eddd583d6ac47dd072922d6f66d7d502f6f9a964/numpy-1.25.1-cp310-cp310-macosx_10_9_x86_64.whl.metadata\n",
      "  Downloading numpy-1.25.1-cp310-cp310-macosx_10_9_x86_64.whl.metadata (5.6 kB)\n",
      "Collecting requests>=2.31 (from yfinance)\n",
      "  Obtaining dependency information for requests>=2.31 from https://files.pythonhosted.org/packages/70/8e/0e2d847013cb52cd35b38c009bb167a1a26b2ce6cd6965bf26b47bc0bf44/requests-2.31.0-py3-none-any.whl.metadata\n",
      "  Downloading requests-2.31.0-py3-none-any.whl.metadata (4.6 kB)\n",
      "Collecting multitasking>=0.0.7 (from yfinance)\n",
      "  Using cached multitasking-0.0.11-py3-none-any.whl (8.5 kB)\n",
      "Requirement already satisfied: lxml>=4.9.1 in /Users/miryam.chen/opt/anaconda3/envs/UdacityCapstone/lib/python3.10/site-packages (from yfinance) (4.9.2)\n",
      "Collecting appdirs>=1.4.4 (from yfinance)\n",
      "  Downloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)\n",
      "Collecting pytz>=2022.5 (from yfinance)\n",
      "  Using cached pytz-2023.3-py2.py3-none-any.whl (502 kB)\n",
      "Collecting frozendict>=2.3.4 (from yfinance)\n",
      "  Downloading frozendict-2.3.8-cp310-cp310-macosx_10_9_x86_64.whl (36 kB)\n",
      "Requirement already satisfied: beautifulsoup4>=4.11.1 in /Users/miryam.chen/opt/anaconda3/envs/UdacityCapstone/lib/python3.10/site-packages (from yfinance) (4.12.2)\n",
      "Collecting html5lib>=1.1 (from yfinance)\n",
      "  Using cached html5lib-1.1-py2.py3-none-any.whl (112 kB)\n",
      "Requirement already satisfied: soupsieve>1.2 in /Users/miryam.chen/opt/anaconda3/envs/UdacityCapstone/lib/python3.10/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.4)\n",
      "Requirement already satisfied: six>=1.9 in /Users/miryam.chen/opt/anaconda3/envs/UdacityCapstone/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (1.16.0)\n",
      "Requirement already satisfied: webencodings in /Users/miryam.chen/opt/anaconda3/envs/UdacityCapstone/lib/python3.10/site-packages (from html5lib>=1.1->yfinance) (0.5.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /Users/miryam.chen/opt/anaconda3/envs/UdacityCapstone/lib/python3.10/site-packages (from pandas>=1.3.0->yfinance) (2.8.2)\n",
      "Collecting tzdata>=2022.1 (from pandas>=1.3.0->yfinance)\n",
      "  Using cached tzdata-2023.3-py2.py3-none-any.whl (341 kB)\n",
      "Collecting charset-normalizer<4,>=2 (from requests>=2.31->yfinance)\n",
      "  Obtaining dependency information for charset-normalizer<4,>=2 from https://files.pythonhosted.org/packages/81/a0/96317ce912b512b7998434eae5e24b28bcc5f1680ad85348e31e1ca56332/charset_normalizer-3.2.0-cp310-cp310-macosx_10_9_x86_64.whl.metadata\n",
      "  Downloading charset_normalizer-3.2.0-cp310-cp310-macosx_10_9_x86_64.whl.metadata (31 kB)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /Users/miryam.chen/opt/anaconda3/envs/UdacityCapstone/lib/python3.10/site-packages (from requests>=2.31->yfinance) (3.4)\n",
      "Collecting urllib3<3,>=1.21.1 (from requests>=2.31->yfinance)\n",
      "  Obtaining dependency information for urllib3<3,>=1.21.1 from https://files.pythonhosted.org/packages/9b/81/62fd61001fa4b9d0df6e31d47ff49cfa9de4af03adecf339c7bc30656b37/urllib3-2.0.4-py3-none-any.whl.metadata\n",
      "  Downloading urllib3-2.0.4-py3-none-any.whl.metadata (6.6 kB)\n",
      "Collecting certifi>=2017.4.17 (from requests>=2.31->yfinance)\n",
      "  Obtaining dependency information for certifi>=2017.4.17 from https://files.pythonhosted.org/packages/4c/dd/2234eab22353ffc7d94e8d13177aaa050113286e93e7b40eae01fbf7c3d9/certifi-2023.7.22-py3-none-any.whl.metadata\n",
      "  Downloading certifi-2023.7.22-py3-none-any.whl.metadata (2.2 kB)\n",
      "Using cached yfinance-0.2.26-py2.py3-none-any.whl (62 kB)\n",
      "Downloading numpy-1.25.1-cp310-cp310-macosx_10_9_x86_64.whl (20.1 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m20.1/20.1 MB\u001b[0m \u001b[31m35.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading pandas-2.0.3-cp310-cp310-macosx_10_9_x86_64.whl (11.8 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.8/11.8 MB\u001b[0m \u001b[31m33.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hUsing cached requests-2.31.0-py3-none-any.whl (62 kB)\n",
      "Downloading certifi-2023.7.22-py3-none-any.whl (158 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m158.3/158.3 kB\u001b[0m \u001b[31m14.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading charset_normalizer-3.2.0-cp310-cp310-macosx_10_9_x86_64.whl (126 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m126.4/126.4 kB\u001b[0m \u001b[31m11.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading urllib3-2.0.4-py3-none-any.whl (123 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m123.9/123.9 kB\u001b[0m \u001b[31m12.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hInstalling collected packages: pytz, multitasking, appdirs, urllib3, tzdata, numpy, html5lib, frozendict, charset-normalizer, certifi, requests, pandas, yfinance\n",
      "Successfully installed appdirs-1.4.4 certifi-2023.7.22 charset-normalizer-3.2.0 frozendict-2.3.8 html5lib-1.1 multitasking-0.0.11 numpy-1.25.1 pandas-2.0.3 pytz-2023.3 requests-2.31.0 tzdata-2023.3 urllib3-2.0.4 yfinance-0.2.26\n"
     ]
    }
   ],
   "source": [
    "!pip install yfinance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "96e51995",
   "metadata": {},
   "outputs": [],
   "source": [
    "import yfinance as yf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3e58c089",
   "metadata": {},
   "outputs": [],
   "source": [
    "#list of symbols I am interested in\n",
    "symbols = ['BRK-B', 'BERY', 'BN', 'GOOGL', 'CCL', 'DG', 'DAVA', 'PYPL']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "92c6d4a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#create empty list to store data for each symbol\n",
    "data = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a62bbbcd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n",
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    }
   ],
   "source": [
    "#loop through each symbol and get data\n",
    "for symbol in symbols:\n",
    "    df=yf.download(symbol, start='2023-01-01', end='2023-07-30')\n",
    "    #store the data in the dictionary\n",
    "    data[symbol]=df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "47066852",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data for [symbol]:\n",
      "                  Open        High         Low       Close   Adj Close  \\\n",
      "Date                                                                     \n",
      "2023-01-03  310.070007  312.390015  307.380005  309.910004  309.910004   \n",
      "2023-01-04  312.000000  316.890015  311.250000  314.549988  314.549988   \n",
      "2023-01-05  313.570007  314.230011  310.000000  312.899994  312.899994   \n",
      "2023-01-06  315.000000  320.160004  313.380005  318.690002  318.690002   \n",
      "2023-01-09  319.019989  320.500000  314.750000  315.529999  315.529999   \n",
      "...                ...         ...         ...         ...         ...   \n",
      "2023-07-24  346.769989  351.190002  346.279999  349.630005  349.630005   \n",
      "2023-07-25  349.320007  349.660004  345.540009  347.579987  347.579987   \n",
      "2023-07-26  347.559998  351.089996  347.519989  349.799988  349.799988   \n",
      "2023-07-27  350.690002  351.269989  348.600006  349.309998  349.309998   \n",
      "2023-07-28  349.929993  351.000000  348.320007  349.809998  349.809998   \n",
      "\n",
      "             Volume  \n",
      "Date                 \n",
      "2023-01-03  3549900  \n",
      "2023-01-04  5121200  \n",
      "2023-01-05  3416300  \n",
      "2023-01-06  3647900  \n",
      "2023-01-09  4397400  \n",
      "...             ...  \n",
      "2023-07-24  3269400  \n",
      "2023-07-25  3014000  \n",
      "2023-07-26  2682900  \n",
      "2023-07-27  2706700  \n",
      "2023-07-28  2473300  \n",
      "\n",
      "[143 rows x 6 columns]\n",
      "\n",
      "data for [symbol]:\n",
      "                 Open       High        Low      Close  Adj Close   Volume\n",
      "Date                                                                      \n",
      "2023-01-03  60.669998  61.090000  59.830002  60.459999  59.957088   835400\n",
      "2023-01-04  61.000000  61.730000  60.540001  61.520000  61.008270   866400\n",
      "2023-01-05  60.610001  60.990002  59.869999  60.779999  60.274426   858400\n",
      "2023-01-06  61.500000  61.830002  61.160000  61.500000  60.988441  1016600\n",
      "2023-01-09  61.849998  62.610001  61.450001  61.590000  61.077690   868100\n",
      "...               ...        ...        ...        ...        ...      ...\n",
      "2023-07-24  66.750000  67.279999  66.739998  67.239998  67.239998   517000\n",
      "2023-07-25  67.339996  68.010002  67.000000  67.019997  67.019997   968500\n",
      "2023-07-26  66.750000  67.239998  65.570000  65.660004  65.660004  1432100\n",
      "2023-07-27  65.959999  66.139999  64.889999  65.160004  65.160004   995400\n",
      "2023-07-28  65.720001  66.010002  64.589996  65.279999  65.279999   597700\n",
      "\n",
      "[143 rows x 6 columns]\n",
      "\n",
      "data for [symbol]:\n",
      "                 Open       High        Low      Close  Adj Close   Volume\n",
      "Date                                                                      \n",
      "2023-01-03  31.760000  32.119999  31.180000  31.559999  31.424549  1666300\n",
      "2023-01-04  31.959999  32.959999  31.959999  32.900002  32.758801  2016500\n",
      "2023-01-05  32.560001  32.759998  31.910000  32.099998  31.962231  1795100\n",
      "2023-01-06  32.340000  33.389999  32.130001  33.270000  33.127213  2028300\n",
      "2023-01-09  33.689999  34.439999  33.450001  33.840000  33.694763  1955700\n",
      "...               ...        ...        ...        ...        ...      ...\n",
      "2023-07-24  35.490002  35.980000  35.450001  35.509998  35.509998  1233600\n",
      "2023-07-25  35.500000  35.709999  35.290001  35.680000  35.680000  1582500\n",
      "2023-07-26  35.549999  35.689999  35.349998  35.410000  35.410000  1452700\n",
      "2023-07-27  35.709999  35.730000  34.779999  34.810001  34.810001  1091200\n",
      "2023-07-28  35.139999  35.349998  34.549999  34.720001  34.720001  1604900\n",
      "\n",
      "[143 rows x 6 columns]\n",
      "\n",
      "data for [symbol]:\n",
      "                  Open        High         Low       Close   Adj Close  \\\n",
      "Date                                                                     \n",
      "2023-01-03   89.589996   91.050003   88.519997   89.120003   89.120003   \n",
      "2023-01-04   90.349998   90.650002   87.269997   88.080002   88.080002   \n",
      "2023-01-05   87.470001   87.570000   85.900002   86.199997   86.199997   \n",
      "2023-01-06   86.790001   87.690002   84.860001   87.339996   87.339996   \n",
      "2023-01-09   88.360001   90.050003   87.860001   88.019997   88.019997   \n",
      "...                ...         ...         ...         ...         ...   \n",
      "2023-07-24  121.660004  123.000000  120.980003  121.529999  121.529999   \n",
      "2023-07-25  121.360001  123.150002  121.019997  122.209999  122.209999   \n",
      "2023-07-26  130.070007  130.979996  128.320007  129.270004  129.270004   \n",
      "2023-07-27  131.669998  133.240005  128.789993  129.399994  129.399994   \n",
      "2023-07-28  130.779999  133.740005  130.570007  132.580002  132.580002   \n",
      "\n",
      "              Volume  \n",
      "Date                  \n",
      "2023-01-03  28131200  \n",
      "2023-01-04  34854800  \n",
      "2023-01-05  27194400  \n",
      "2023-01-06  41381500  \n",
      "2023-01-09  29003900  \n",
      "...              ...  \n",
      "2023-07-24  29686100  \n",
      "2023-07-25  52509600  \n",
      "2023-07-26  61682100  \n",
      "2023-07-27  44952100  \n",
      "2023-07-28  36591200  \n",
      "\n",
      "[143 rows x 6 columns]\n",
      "\n",
      "data for [symbol]:\n",
      "                 Open       High        Low      Close  Adj Close    Volume\n",
      "Date                                                                       \n",
      "2023-01-03   8.240000   8.320000   7.920000   7.970000   7.970000  33965200\n",
      "2023-01-04   8.070000   8.760000   7.980000   8.740000   8.740000  52046600\n",
      "2023-01-05   8.570000   8.990000   8.470000   8.950000   8.950000  35689900\n",
      "2023-01-06   9.000000   9.230000   8.830000   9.200000   9.200000  40099600\n",
      "2023-01-09   9.260000   9.640000   9.210000   9.470000   9.470000  44454500\n",
      "...               ...        ...        ...        ...        ...       ...\n",
      "2023-07-24  17.879999  18.010000  17.219999  17.850000  17.850000  28805300\n",
      "2023-07-25  17.709999  17.780001  17.340000  17.450001  17.450001  26368800\n",
      "2023-07-26  17.500000  17.740000  17.330000  17.650000  17.650000  23856600\n",
      "2023-07-27  18.620001  18.809999  18.090000  18.219999  18.219999  50553800\n",
      "2023-07-28  18.360001  18.719999  18.360001  18.490000  18.490000  24508400\n",
      "\n",
      "[143 rows x 6 columns]\n",
      "\n",
      "data for [symbol]:\n",
      "                  Open        High         Low       Close   Adj Close  \\\n",
      "Date                                                                     \n",
      "2023-01-03  247.699997  248.360001  244.720001  246.720001  245.177536   \n",
      "2023-01-04  245.679993  247.960007  242.490005  243.500000  241.977661   \n",
      "2023-01-05  242.820007  245.830002  241.600006  245.419998  243.885666   \n",
      "2023-01-06  247.220001  251.000000  245.279999  248.559998  247.006027   \n",
      "2023-01-09  248.649994  248.649994  240.130005  241.050003  239.542984   \n",
      "...                ...         ...         ...         ...         ...   \n",
      "2023-07-24  168.789993  168.789993  166.740005  167.669998  167.669998   \n",
      "2023-07-25  167.919998  167.919998  163.110001  164.690002  164.690002   \n",
      "2023-07-26  165.490005  166.690002  164.300003  164.880005  164.880005   \n",
      "2023-07-27  165.000000  173.470001  165.000000  167.949997  167.949997   \n",
      "2023-07-28  168.779999  171.110001  167.820007  170.589996  170.589996   \n",
      "\n",
      "             Volume  \n",
      "Date                 \n",
      "2023-01-03  1812200  \n",
      "2023-01-04  2472100  \n",
      "2023-01-05  1746300  \n",
      "2023-01-06  2212800  \n",
      "2023-01-09  2363100  \n",
      "...             ...  \n",
      "2023-07-24  2175100  \n",
      "2023-07-25  2439600  \n",
      "2023-07-26  2171500  \n",
      "2023-07-27  3052100  \n",
      "2023-07-28  2125300  \n",
      "\n",
      "[143 rows x 6 columns]\n",
      "\n",
      "data for [symbol]:\n",
      "                 Open       High        Low      Close  Adj Close  Volume\n",
      "Date                                                                     \n",
      "2023-01-03  76.970001  78.440002  74.610001  75.129997  75.129997  128700\n",
      "2023-01-04  75.410004  76.389999  74.269997  75.430000  75.430000  152400\n",
      "2023-01-05  74.730003  75.139999  70.440002  71.160004  71.160004  126200\n",
      "2023-01-06  71.709999  72.389999  69.089996  71.809998  71.809998   99300\n",
      "2023-01-09  72.750000  76.879997  72.360001  74.800003  74.800003  115700\n",
      "...               ...        ...        ...        ...        ...     ...\n",
      "2023-07-24  54.099998  54.619999  53.570000  54.560001  54.560001  196800\n",
      "2023-07-25  54.720001  55.310001  53.930000  54.279999  54.279999  324200\n",
      "2023-07-26  53.639999  54.730000  53.180000  53.820000  53.820000  222700\n",
      "2023-07-27  54.459999  54.590000  50.110001  50.250000  50.250000  352000\n",
      "2023-07-28  51.130001  52.259998  50.549999  51.830002  51.830002  228700\n",
      "\n",
      "[143 rows x 6 columns]\n",
      "\n",
      "data for [symbol]:\n",
      "                 Open       High        Low      Close  Adj Close    Volume\n",
      "Date                                                                       \n",
      "2023-01-03  73.690002  75.260002  73.379997  74.580002  74.580002  27974200\n",
      "2023-01-04  76.110001  78.480003  75.430000  77.690002  77.690002  19144700\n",
      "2023-01-05  77.300003  77.320000  75.650002  76.269997  76.269997  11113800\n",
      "2023-01-06  76.769997  77.059998  73.949997  76.480003  76.480003  14167900\n",
      "2023-01-09  77.000000  78.764999  76.529999  77.080002  77.080002  12966100\n",
      "...               ...        ...        ...        ...        ...       ...\n",
      "2023-07-24  73.040001  73.970001  73.014999  73.690002  73.690002   8845400\n",
      "2023-07-25  73.680000  74.300003  72.940002  72.959999  72.959999   8536000\n",
      "2023-07-26  72.889999  73.760002  72.410004  73.430000  73.430000  11332500\n",
      "2023-07-27  74.330002  75.055000  71.809998  72.029999  72.029999  11836600\n",
      "2023-07-28  73.040001  74.190002  72.959999  73.980003  73.980003  10182300\n",
      "\n",
      "[143 rows x 6 columns]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#check out the data and format\n",
    "for symbol, df in data.items():\n",
    "    print(f\"data for [symbol]:\")\n",
    "    print(df)\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7c63799a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(143, 6)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#each \n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "96da0042",
   "metadata": {},
   "outputs": [],
   "source": [
    "#set cutoff date for training and testing data\n",
    "cutoff_date = '2023-06-30'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7709b584",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting scikit-learn\n",
      "  Obtaining dependency information for scikit-learn from https://files.pythonhosted.org/packages/35/d3/83a3e7144da980604a20e27b6f1e8a2164ab324310d69a82f2cff1da6326/scikit_learn-1.3.0-cp310-cp310-macosx_10_9_x86_64.whl.metadata\n",
      "  Downloading scikit_learn-1.3.0-cp310-cp310-macosx_10_9_x86_64.whl.metadata (11 kB)\n",
      "Requirement already satisfied: numpy>=1.17.3 in /Users/miryam.chen/opt/anaconda3/envs/UdacityCapstone/lib/python3.10/site-packages (from scikit-learn) (1.25.1)\n",
      "Collecting scipy>=1.5.0 (from scikit-learn)\n",
      "  Obtaining dependency information for scipy>=1.5.0 from https://files.pythonhosted.org/packages/b1/64/67efd36ed232b9b107ad8435d0f0ebec28e5e6f782ededbd1ab4a37a0100/scipy-1.11.1-cp310-cp310-macosx_10_9_x86_64.whl.metadata\n",
      "  Downloading scipy-1.11.1-cp310-cp310-macosx_10_9_x86_64.whl.metadata (54 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m54.1/54.1 kB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hCollecting joblib>=1.1.1 (from scikit-learn)\n",
      "  Obtaining dependency information for joblib>=1.1.1 from https://files.pythonhosted.org/packages/28/08/9dcdaa5aac4634e4c23af26d92121f7ce445c630efa0d3037881ae2407fb/joblib-1.3.1-py3-none-any.whl.metadata\n",
      "  Downloading joblib-1.3.1-py3-none-any.whl.metadata (5.4 kB)\n",
      "Collecting threadpoolctl>=2.0.0 (from scikit-learn)\n",
      "  Obtaining dependency information for threadpoolctl>=2.0.0 from https://files.pythonhosted.org/packages/81/12/fd4dea011af9d69e1cad05c75f3f7202cdcbeac9b712eea58ca779a72865/threadpoolctl-3.2.0-py3-none-any.whl.metadata\n",
      "  Downloading threadpoolctl-3.2.0-py3-none-any.whl.metadata (10.0 kB)\n",
      "Downloading scikit_learn-1.3.0-cp310-cp310-macosx_10_9_x86_64.whl (10.2 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.2/10.2 MB\u001b[0m \u001b[31m23.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m0:01\u001b[0m\n",
      "\u001b[?25hDownloading joblib-1.3.1-py3-none-any.whl (301 kB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m302.0/302.0 kB\u001b[0m \u001b[31m30.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hDownloading scipy-1.11.1-cp310-cp310-macosx_10_9_x86_64.whl (37.2 MB)\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m37.2/37.2 MB\u001b[0m \u001b[31m12.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hDownloading threadpoolctl-3.2.0-py3-none-any.whl (15 kB)\n",
      "Installing collected packages: threadpoolctl, scipy, joblib, scikit-learn\n",
      "Successfully installed joblib-1.3.1 scikit-learn-1.3.0 scipy-1.11.1 threadpoolctl-3.2.0\n"
     ]
    }
   ],
   "source": [
    "!pip install scikit-learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8e52d647",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "47fba9a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "X_train, X_test, y_train, y_test = {}, {}, {}, {}\n",
    "\n",
    "for symbol, df in data.items():\n",
    "    cutoff_index = df.index.get_loc(cutoff_date)\n",
    "\n",
    "    X_train[symbol] = df.iloc[:cutoff_index].drop('Close', axis=1)\n",
    "    X_test[symbol] = df.iloc[cutoff_index:].drop('Close', axis=1)\n",
    "    y_train[symbol] = df.iloc[:cutoff_index]['Close']\n",
    "    y_test[symbol] = df.iloc[cutoff_index:]['Close']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c8283b8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
